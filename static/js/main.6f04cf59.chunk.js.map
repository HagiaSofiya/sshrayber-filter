{"version":3,"sources":["styles/AppStyle.js","styles/LoadingStyle.js","Loading.js","styles/FilterStyle.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["mainStyle","color","margin","width","LoadingStyle","padding","LoadingSpinner","display","fill","Loading","react_default","a","createElement","style","className","height","viewBox","xmlns","cx","cy","r","menuStyle","flexWrap","justifyContent","marginTop","marginBottom","buttonStyle","backgroundColor","border","borderBottom","fontSize","fontWeight","textAlign","textTransform","gridStyle","gridScreenStyle","marginInlineStart","marginInlineEnd","gridImgStyle","boxShadow","gridCaptionStyle","Filter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","screens","filteredScreens","_this2","setState","fetch","then","response","json","data","images","catch","err","console","log","key","filter","screen","name","_this3","_this$state","categories","toConsumableArray","Set","map","transition","transitions","scaleDown","type","onClick","reset","category","compareBy","lib_default","columnWidth","gutterWidth","gutterHeight","duration","easing","easings","cubicOut","appearDelay","appear","appeared","enter","entered","leaved","src","url","alt","src_Loading","React","Component","App","src_Filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f04cf59.chunk.js","sourcesContent":["const mainStyle = {\n    color: '#373633',\n    margin: '0 auto',\n    width: '80vw'\n}\n\nexport { mainStyle } ","const LoadingStyle = {\n\t\"padding\": \"50px 0\",\n    \"width\": \"100%\"\n}\n\nconst LoadingSpinner = {\n    \"display\": \"block\",\n    \"fill\": \"#4dd2c2\",\n\t\"width\": \"100%\"\n}\n\nexport { LoadingStyle , LoadingSpinner }","import React from 'react';\nimport { LoadingStyle, LoadingSpinner} from './styles/LoadingStyle'\n\nconst Loading = () => (\n\t<div style={LoadingStyle}>\n\t\t<svg\n\t\t\tstyle={LoadingSpinner}\n\t\t\tclassName='loading-spinner'\n\t\t\twidth=\"60\"\n\t\t\theight=\"20\"\n\t\t\tviewBox=\"0 0 60 20\"\n\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t>\n\t\t\t<circle cx=\"7\" cy=\"15\" r=\"4\"/>\n\t\t\t<circle cx=\"30\" cy=\"15\" r=\"4\"/>\n\t\t\t<circle cx=\"53\" cy=\"15\" r=\"4\"/>\n\t\t</svg>\n\t</div>\n)\n  \nexport default Loading;","const menuStyle = {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-evenly',\n    marginTop: '25px',\n    marginBottom: '25px',\n}\n\nconst buttonStyle = {\n    backgroundColor: 'transparent',\n    border: 'none',\n    borderBottom: '2px solid #4DD2C2',\n    fontSize: '16px',\n    fontWeight: '500',\n    padding: '10px',\n    textAlign: 'left',\n    textTransform: 'capitalize'\n}\n\nconst gridStyle = {\n    marginBottom: '50px'\n}\n\nconst gridScreenStyle = {\n    height: '380px',\n    marginInlineStart: '0px',\n    marginInlineEnd: '0px'\n}\n\nconst gridImgStyle = {\n    boxShadow: 'rgba(0, 0, 0, 0.08) 0px 0.7rem 2.5rem',\n    width: '100%'\n}\n\nconst gridCaptionStyle = {\n    fontSize: '14px',\n    marginTop: '4px',\n    textAlign: 'left',\n    textTransform: 'capitalize'\n}\n\nexport { menuStyle , buttonStyle , gridStyle , gridScreenStyle, gridImgStyle, gridCaptionStyle }","import React from 'react';\nimport Loading from './Loading';\nimport { menuStyle , buttonStyle , gridStyle , gridScreenStyle, gridImgStyle, gridCaptionStyle } from './styles/FilterStyle';\nimport  StackGrid, { transitions, easings }from 'react-stack-grid';\n\n\nclass Filter extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            loading: false,\n            screens: [],\n            filteredScreens: []\n        }\n    }\n\n    componentDidMount(){\n        this.setState({loading: true})\n        fetch('https://api.jsonbin.io/b/5c7db3a72e4731596f15c20d')\n        .then(response => response.json())\n        .then(data => this.setState({ \n            loading: false,\n            screens: data.images, \n            filteredScreens: data.images\n        }))\n        .catch(err => {\n            console.log(err);\n        });\n    }\n\n    compareBy(key){\n        this.setState({\n            filteredScreens: this.state.screens.filter(screen => {\n                return screen.name === key ;\n            })\n        })\n    }\n\n    reset(){\n        this.setState({\n            filteredScreens: this.state.screens\n        })\n    }\n\n    render(){\n        const { filteredScreens, screens } = this.state\n        const categories = [...new Set(screens.map(screen => screen.name))]\n        const transition = transitions.scaleDown;\n        return (\n            this.state.loading === false\n            ? <div className='container'>\n                <div style={menuStyle}>\n                    <button\n                        type=\"button\"\n                        onClick={() => this.reset()}\n                        key=\"reset\"\n                        style={buttonStyle}\n                    >\n                        all\n                    </button>\n                    {categories.map(category => {\n                        return (\n                                <button\n                                    type=\"button\"\n                                    onClick={() => this.compareBy(category)} \n                                    key={category}\n                                    style={buttonStyle}\n                                    >\n                                    {category}\n                                </button>\n                            )\n                    })}\n                </div>\n                <StackGrid\n                    style={gridStyle}\n                    columnWidth={200}\n                    gutterWidth={15}\n                    gutterHeight={15}\n                    duration={600}\n                    easing={easings.cubicOut}\n                    appearDelay={60}\n                    appear={transition.appear}\n                    appeared={transition.appeared}\n                    enter={transition.enter}\n                    entered={transition.entered}\n                    leaved={transition.leaved}\n                >\n                    {filteredScreens.map( screens => {\n                        return (\n                            <figure style={gridScreenStyle} key={screens.key}>\n                                <img style={gridImgStyle} src={screens.url} alt={screens.name}/>\n                                <figcaption style={gridCaptionStyle}>{screens.name}</figcaption>\n                            </figure>\n\n                        )\n                    })}\n                </StackGrid>\n            </div>\n            : <Loading/>\n        )\n    }\n}\n\nexport default Filter;","import React from 'react';\nimport { mainStyle } from './styles/AppStyle';\nimport Filter from './Filter';\n\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div style={mainStyle}>\n\t\t\t\t<Filter/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.css';\nimport './styles/base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}