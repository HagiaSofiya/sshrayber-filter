{"version":3,"sources":["styles/AppStyle.js","styles/FilterStyle.js","Filter.js","App.js","serviceWorker.js","index.js"],"names":["mainStyle","color","margin","width","menuStyle","display","flexWrap","justifyContent","marginTop","marginBottom","buttonStyle","backgroundColor","border","borderBottom","fontSize","fontWeight","padding","textAlign","textTransform","gridStyle","gridScreenStyle","height","marginInlineStart","marginInlineEnd","gridImgStyle","boxShadow","gridCaptionStyle","Filter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","screens","filteredScreens","key","setState","filter","screen","name","_this2","_this$state","categories","toConsumableArray","Set","map","transition","transitions","scaleDown","react_default","a","createElement","className","style","type","onClick","reset","category","compareBy","lib_default","columnWidth","gutterWidth","gutterHeight","duration","easing","easings","cubicOut","appearDelay","appear","appeared","enter","entered","leaved","src","url","alt","React","Component","App","src_Filter","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sLAAMA,EAAY,CACdC,MAAS,UACTC,OAAU,SACVC,MAAS,gBCHPC,EAAY,CACdC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,UAAW,OACXC,aAAc,QAGZC,EAAc,CAChBC,gBAAiB,cACjBC,OAAQ,OACRC,aAAc,oBACdC,SAAU,OACVC,WAAY,MACZC,QAAS,OACTC,UAAW,OACXC,cAAe,cAGbC,EAAY,CACdV,aAAgB,QAGdW,EAAkB,CACpBC,OAAU,QACVC,kBAAqB,MACrBC,gBAAmB,OAEjBC,EAAe,CACjBC,UAAa,wCACbtB,MAAS,QAGPuB,EAAmB,CACrBZ,SAAY,OACZN,UAAa,MACbS,UAAa,OACbC,cAAiB,uCCkDNS,cAhFX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,QAASA,EACTC,gBAAiBD,GAJPR,yEAQRU,GACNP,KAAKQ,SAAS,CACVF,gBAAiBN,KAAKI,MAAMC,QAAQI,OAAO,SAAAC,GACvC,OAAOA,EAAOC,OAASJ,sCAM/BP,KAAKQ,SAAS,CACVF,gBAAiBN,KAAKI,MAAMC,2CAI5B,IAAAO,EAAAZ,KAAAa,EACiCb,KAAKI,MAAlCE,EADJO,EACIP,gBAAiBD,EADrBQ,EACqBR,QACnBS,EAAUhB,OAAAiB,EAAA,EAAAjB,CAAO,IAAIkB,IAAIX,EAAQY,IAAI,SAAAP,GAAM,OAAIA,EAAOC,SAEtDO,EAAaC,cAAYC,UAC/B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKE,MAAOrD,GACRiD,EAAAC,EAAAC,cAAA,UACIG,KAAK,SACLC,QAAS,kBAAMf,EAAKgB,SACpBrB,IAAI,QACJkB,MAAO/C,GAJX,OAQCoC,EAAWG,IAAI,SAAAY,GACZ,OACQR,EAAAC,EAAAC,cAAA,UACIG,KAAK,SACLC,QAAS,kBAAMf,EAAKkB,UAAUD,IAC9BtB,IAAKsB,EACLJ,MAAO/C,GAENmD,MAKrBR,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACIG,MAAOtC,EACP6C,YAAa,IACbC,YAAa,GACbC,aAAc,GACdC,SAAU,IACVC,OAAQC,UAAQC,SAChBC,YAAa,GACbC,OAAQtB,EAAWsB,OACnBC,SAAUvB,EAAWuB,SACrBC,MAAOxB,EAAWwB,MAClBC,QAASzB,EAAWyB,QACpBC,OAAQ1B,EAAW0B,QAElBtC,EAAgBW,IAAI,SAACZ,GAClB,OACIgB,EAAAC,EAAAC,cAAA,UAAQE,MAAOrC,EAAiBmB,IAAKF,EAAQE,KACzCc,EAAAC,EAAAC,cAAA,OAAKE,MAAOjC,EAAcqD,IAAKxC,EAAQyC,IAAKC,IAAK1C,EAAQM,OACzDU,EAAAC,EAAAC,cAAA,cAAYE,MAAO/B,GAAmBW,EAAQM,kBAtEzDqC,IAAMC,WCSZC,mLARb,OACC7B,EAAAC,EAAAC,cAAA,OAAKE,MAAOzD,GACXqD,EAAAC,EAAAC,cAAC4B,EAAD,cAJcH,IAAMC,WCOJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOrC,EAAAC,EAAAC,cAACoC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.15073dbf.chunk.js","sourcesContent":["const mainStyle = {\n    \"color\": \"#373633\",\n    \"margin\": \"0 auto\",\n    \"width\": \"80vw\"\n}\n\nexport { mainStyle } ","const menuStyle = {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-evenly\",\n    marginTop: \"25px\",\n    marginBottom: \"25px\",\n}\n\nconst buttonStyle = {\n    backgroundColor: \"transparent\",\n    border: \"none\",\n    borderBottom: \"2px solid #4DD2C2\",\n    fontSize: \"16px\",\n    fontWeight: \"500\",\n    padding: \"10px\",\n    textAlign: \"left\",\n    textTransform: \"capitalize\"\n}\n\nconst gridStyle = {\n    \"marginBottom\": \"50px\"\n}\n\nconst gridScreenStyle = {\n    \"height\": \"380px\",\n    \"marginInlineStart\": \"0px\",\n    \"marginInlineEnd\": \"0px\"\n}\nconst gridImgStyle = {\n    \"boxShadow\": \"rgba(0, 0, 0, 0.08) 0px 0.7rem 2.5rem\",\n    \"width\": \"100%\"\n}\n\nconst gridCaptionStyle = {\n    \"fontSize\": \"14px\",\n    \"marginTop\": \"4px\",\n    \"textAlign\": \"left\",\n    \"textTransform\": \"capitalize\"\n}\n\nexport { menuStyle , buttonStyle , gridStyle , gridScreenStyle, gridImgStyle, gridCaptionStyle }","import React from 'react';\nimport { menuStyle , buttonStyle , gridStyle , gridScreenStyle, gridImgStyle, gridCaptionStyle } from './styles/FilterStyle';\nimport  StackGrid, { transitions, easings }from \"react-stack-grid\";\nimport screens from './data.json';\n\n\nclass Filter extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            screens: screens,\n            filteredScreens: screens\n        }\n    }\n\n    compareBy(key){\n        this.setState({\n            filteredScreens: this.state.screens.filter(screen => {\n                return screen.name === key ;\n            })\n        })\n    }\n\n    reset(){\n        this.setState({\n            filteredScreens: this.state.screens\n        })\n    }\n\n    render(){\n        const { filteredScreens, screens } = this.state\n        const categories = [...new Set(screens.map(screen => screen.name))]\n\n        const transition = transitions.scaleDown;\n        return (\n            <div className='container'>\n                <div style={menuStyle}>\n                    <button\n                        type=\"button\"\n                        onClick={() => this.reset()}\n                        key=\"reset\"\n                        style={buttonStyle}\n                    >\n                        all\n                    </button>\n                    {categories.map(category => {\n                        return (\n                                <button\n                                    type=\"button\"\n                                    onClick={() => this.compareBy(category)} \n                                    key={category}\n                                    style={buttonStyle}\n                                    >\n                                    {category}\n                                </button>\n                            )\n                    })}\n                </div>\n                <StackGrid\n                    style={gridStyle}\n                    columnWidth={200}\n                    gutterWidth={15}\n                    gutterHeight={15}\n                    duration={600}\n                    easing={easings.cubicOut}\n                    appearDelay={60}\n                    appear={transition.appear}\n                    appeared={transition.appeared}\n                    enter={transition.enter}\n                    entered={transition.entered}\n                    leaved={transition.leaved}\n                >\n                    {filteredScreens.map((screens) => {\n                        return (\n                            <figure style={gridScreenStyle} key={screens.key}>\n                                <img style={gridImgStyle} src={screens.url} alt={screens.name}/>\n                                <figcaption style={gridCaptionStyle}>{screens.name}</figcaption>\n                            </figure>\n\n                        )\n                    })}\n                </StackGrid>\n            </div>\n        )\n    }\n}\n\nexport default Filter;","import React from 'react';\nimport { mainStyle } from './styles/AppStyle';\nimport Filter from './Filter';\n\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div style={mainStyle}>\n\t\t\t\t<Filter/>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/reset.css';\nimport './styles/base.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}